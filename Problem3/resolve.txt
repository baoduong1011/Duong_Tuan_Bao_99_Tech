1. About function sortedBalances:

const sortedBalances = useMemo(() => {
    return balances.filter((balance: WalletBalance) => {
		  const balancePriority = getPriority(balance.blockchain);
		  if (lhsPriority > -99) {
		     if (balance.amount <= 0) {
		       return true;
		     }
		  }
		  return false
		}).sort((lhs: WalletBalance, rhs: WalletBalance) => {
			const leftPriority = getPriority(lhs.blockchain);
		  const rightPriority = getPriority(rhs.blockchain);
		  if (leftPriority > rightPriority) {
		    return -1;
		  } else if (rightPriority > leftPriority) {
		    return 1;
		  }
    });
  }, [balances, prices]);

    + lhsPriority is not defined - Fix: change lhsPriority to balancePriority
    + prices is never used in sortedBalances - Fix: change dependencies to [balances]

================================================================================================================================================================================================================================================

2. About function formattedBalances: toFixed() will has error because it doesn't include parameter ( a number) - Fix: .toFixed(2)

================================================================================================================================================================================================================================================

3. About this code:

const rows = sortedBalances.map((balance: FormattedWalletBalance, index: number) => {
  const usdValue = prices[balance.currency] * balance.amount;
  return (
    <WalletRow 
      className={classes.row}
      key={index}
      amount={balance.amount}
      usdValue={usdValue}
      formattedAmount={balance.formatted}
    />
  )
});

    a. If prices[balance.currency] is undefine , this code will throw an error - Fix (prices[balance.currency] ?? 0)
    b. key={index} - in my opinion i think we should change it to  key={`${balance.currency}-${index}`} -  anti-pattern in React



